// YAX - Yet Another Xml encoding

string getTagName(uint32 id) {
	local uint32 i;
	switch (id) {
		case 0x5E237E06: 	return "name";
		case 0xBF396750: 	return "id";
		case 0x6DC044C5: 	return "group";
		case 0xF7C0246A: 	return "size";
		case 0x47CC8C92: 	return "action";
		case 0x77153098: 	return "code";
		case 0xFA7AEFFB: 	return "attribute";
		case 0xD7943D68: 	return "area";
		case 0x1D775834: 	return "value";
		case 0x462CE4F5: 	return "position";
		case 0x297C98F1: 	return "rotation";
		case 0xEC462584: 	return "scale";
		case 0x27BA8E29: 	return "points";
		case 0xF54DE50F: 	return "height";
		case 0xE18651F2: 	return "StageType";
		case 0xA213B07:		return "AreaType";
		case 0x624B37F2: 	return "objID";
		case 0x85D94462: 	return "count";
		case 0x5E9E89CB: 	return "location";
		case 0x55307634: 	return "layouts";
		case 0x4317F817: 	return "quest";
		case 0x6f949845: 	return "time";
		case 0x8CDE5729: 	return "type";
		case 0x58EBF836: 	return "type2";
		case 0xC87C17FD: 	return "terminateArea";
		case 0x218568E4: 	return "normal";
		case 0x0B0541BA: 	return "flags";
		case 0x3D8E604F: 	return "parent";
		case 0xA4FA7C89: 	return "param";
		case 0xDBA80BB2: 	return "body";
		case 0xC1151FD2: 	return "hard";
		case 0x6F0E5340: 	return "extream";
		case 0x4B748449: 	return "bForwardState";
		case 0xAA5A118E: 	return "tokens";
		case 0x7F5E0E38: 	return "resetArea";
		case 0x24146479: 	return "resetType";
		case 0x62A6DC27: 	return "priority";
		case 0xBDD68843: 	return "condition";
		case 0xE6A1A094: 	return "puid";
		case 0xA393D2FB: 	return "state";
		case 0x0EA750E8: 	return "label";
		case 0x4F5BF91D: 	return "pred";
		case 0xB29A809B: 	return "delay";
		case 0xEA78D31C: 	return "bDisable";
		case 0x8ECAEAD4: 	return "command";
		case 0x161B2EA2: 	return "args";
		case 0x9A3E132C: 	return "commands";
		case 0xE11EE94D: 	return "items";
		case 0x6BE8E5D3: 	return "type_";
		case 0xF46609A9: 	return "conditions";
		case 0x192FEA25: 	return "setType";
		case 0xE16C6B94: 	return "alias";
		case 0x9D762289: 	return "max";
		case 0x079A1B49: 	return "setFlag";
		case 0x44055696: 	return "setRtn";
		case 0x2B806C26: 	return "parentID";
		case 0x3B7C6E5A: 	return "radius";
		case 0x659429DB: 	return "icon";
		case 0xC6C6ECF1: 	return "purposeIdx";
		case 0x1C81873A: 	return "script";
		case 0x88CB7D11: 	return "variables";
		case 0xF3BDF423: 	return "eventNo";
		case 0x6DECFE4B: 	return "startType";
		case 0x0ACF1615: 	return "subPhase";
		case 0x666016A9: 	return "loadArea";
		case 0xF68803D6: 	return "connectWalkDist_";
		case 0x26961117: 	return "connectWalkCaptionWait_";
		case 0x1DF0B5A4: 	return "bStop";

		case 0xB1BDD6CB: 	return "ukn_phase";
		case 0x9D4BDE90: 	return "ukn_releaseWhenLeaveLoadArea";

		case 0x57655AB9: 	return "ukn_upDirection";

		case 0xA5646B84: 	return "Rotation_X";
		case 0xD2635B12: 	return "Rotation_Y";
		case 0x8C0C4308: 	return "Fovy";
		case 0xE5E4F8D7: 	return "Distance";
		case 0x80D9E6AC: 	return "pos";
		case 0x6E545368: 	return "tar";
		case 0x1F72D9A1: 	return "usePos";
		case 0x576DEC6C: 	return "useTarget";
		case 0x4E3E07BD: 	return "interRate";
		case 0x2BC18006: 	return "overwrite";
		case 0x590ACAD0: 	return "offset";
		case 0xA488375A: 	return "disableBattle";
		case 0x7C5E24BB: 	return "useLimit";
		case 0xB4D00051: 	return "limitTime";
		case 0xEDF7CF4D: 	return "accType";
		case 0x292EE151: 	return "playerStop";
		case 0x49A66FE5: 	return "actionCamStop";
		case 0x37F95F05: 	return "rotateOnly";
		case 0xB2FCC4C1: 	return "distanceOnly";
		case 0x0DD5C291: 	return "disableCameraHit";
		case 0x1489C6AD: 	return "newInter";
		case 0xCEA6FE34: 	return "endInter";
		case 0xAB627A9A: 	return "endAccType";
		case 0x4B6A0AA8: 	return "Rotation_Z";
		case 0x6EDF07D2: 	return "noControlTarget";
		case 0x3E5BEA70: 	return "overwriteNormalInterRate";
		case 0xBEC5FD31: 	return "normalInterRate";
		case 0xD3B72D3C: 	return "useMoveOffset_0";
		case 0xD19B3010: 	return "moveOffsetScale_10";
		case 0x95FD2202: 	return "moveOffsetInterp_";
		case 0x273E1E66: 	return "moveOffsetInterpStop_";
		case 0x61E4DA85: 	return "useHold";
		case 0xDC130E22: 	return "holdDistance_X";
		case 0xEE256CA0: 	return "holdDistance_Z";
		case 0x681C045D: 	return "useHandOffInterp_";
		case 0x9A421D36: 	return "handOffInterpRate";
		case 0xEB9BDD4C: 	return "fixHeightUse_";
		case 0x5B4BB4E5: 	return "fixHeight_";
		case 0x09F32C52: 	return "playerForceIn_";
		case 0x14DE6FF5: 	return "leavePlayer_";
		
		case 0x062EFD80: 	return "cameraInterpEnable";
		case 0x798A5E8C: 	return "useStartEndInter_";

		case 0x86FB7EBE: 	return "interpTimeDistance_";
		case 0x45BB7468: 	return "interpTimeAngle_";
		case 0x564AC09B: 	return "interpTimeFov_";
		case 0xD1C975E5: 	return "interpTimePosition_";
		case 0xA73B92D0: 	return "interpTimeTarget_";

		case 0x55B7EDC0: 	return "interpTimeAccTypeDistance_";
		case 0x7E412FC0: 	return "interpTimeAccTypeAngle_";
		case 0x49116412: 	return "interpTimeAccTypeFov_";
		case 0x0285E69B: 	return "interpTimeAccTypePosition_";
		case 0x7F0D4351: 	return "interpTimeAccTypeTarget_";

		case 0x0A09493C: 	return "endInterpTimeDistance_";
		case 0xCF3A30B1: 	return "endInterpTimeAngle_";
		case 0xD5B0D017: 	return "endInterpTimeFov_";
		case 0x5D3B4267: 	return "endInterpTimePosition_";
		case 0x58BE79E4: 	return "endInterpTimeTarget_";

		case 0xC63A2BB0: 	return "endInterpTimeAccTypeDistance_";
		case 0xDAB1EE51: 	return "endInterpTimeAccTypeAngle_";
		case 0xF819B726: 	return "endInterpTimeAccTypeFov_";
		case 0x910820EB: 	return "endInterpTimeAccTypePosition_";
		case 0xF8A11042: 	return "endInterpTimeAccTypeTarget_";

		case 0x02C42079: 	return "route";
		case 0x1D3D05FC: 	return "nodes";
		case 0xFDD30F8A: 	return "resolution";
		case 0x9B2C7CE8: 	return "playerPath";
		case 0xB7A5F324: 	return "point";
		case 0xFDF58A70: 	return "playerY";
		case 0x082D2158: 	return "branchDist";
		case 0x673541D8: 	return "excludeArea";

		case 0xE12E16F9: 	return "useOffsetPlDir";
		case 0xF22D7BF3: 	return "useOffsetPlDirRate_";
		case 0x2755CF13: 	return "sideViewCameraPathDirOffsetEnable_";
		case 0x0BA7A529: 	return "sideViewCameraPathDirOffsetLengthSlow_";
		case 0x3400E6DA: 	return "sideViewCameraPathDirOffsetLengthMiddle_";
		case 0xE800ACAE: 	return "sideViewCameraPathDirOffsetLengthHigh_";
		case 0xF42FED42: 	return "sideViewCameraPathDirOffsetInterp_";
		case 0xAF626175: 	return "sideViewCameraPathDirOffsetInterpStop_";
		case 0xA74B4854: 	return "sideViewCameraInterpSeparate";
		case 0x59C60B78: 	return "sideViewCameraInterpSeparateXZ_";
		case 0x132DDACB: 	return "sideViewCameraInterpSeparateY_";
		case 0xE588C446: 	return "useFovy_";
		case 0xE640089D: 	return "fovy_";
		case 0xB674CB76: 	return "viewOffsetInterp_";
		case 0xEEE40E86: 	return "viewOffsetGround_";
		case 0x704C8A63: 	return "viewOffsetAir_";

		case 0xFAC63E6D: 	return "slideUp_";
		case 0x33E50497: 	return "slideDown_";
		case 0xD8163D73: 	return "slideX_";
		case 0x6885013F: 	return "forceAdjust_";
		case 0xF18CFF4E: 	return "useInterpLimit_";
		case 0xF5B27ACA: 	return "interpLimit_";

		case 0xDFEC3F39: 	return "rate";
		case 0xFB4D2F3C: 	return "chooseRange";
		case 0xA17B1DD0: 	return "min";
		case 0x13336F99: 	return "resets";
		case 0xB04EB611: 	return "repeatType";
		case 0xC95238E1: 	return "minDistance";
		case 0x6646FE47: 	return "levelRange";
		case 0x9D4337C2: 	return "spawnRange";
		case 0x8EC2983F: 	return "createRange";
		case 0xb8fc08e7: 	return "spawnInterval";
		case 0x3e0b2911: 	return "amountEachSpawn";
		case 0xef3241f6: 	return "cameraType";
		case 0x29A5B95F: 	return "relativeLevel";
		case 0xFE76FF13: 	return "searchArea";
		case 0x62DD00ED: 	return "escapeArea";

		case 0x5AD22641: 	return "command_onEnter";
		case 0x63B1BAE8: 	return "command_onExit";

		case 0x57995DB7: 	return "curve";
		case 0xFAED8C3F: 	return "controls";
		case 0x5F0C5BA7: 	return "cp";

		case 0x09B629C8: 	return "on";
		case 0x989A8AE1: 	return "attack_";
		case 0x23F3E57F: 	return "escape_";
		case 0xB2E217FC: 	return "run_";
		case 0xDDA5A5BF: 	return "jump_";
		case 0xD525B051: 	return "gun_";
		case 0xE7E97A93: 	return "skill_";
		case 0xE26AED6B: 	return "suicide_";
		case 0x325A97E9: 	return "walk_";
		case 0x6A68DEBF: 	return "area_";
		case 0xF372C161: 	return "ukn_forceWalkArea_";
		case 0x27D2E589: 	return "ukn_noCaption_";
		case 0x27D2E589: 	return "ukn_actIgnore_";

		case 0xe0b64a5b: 	return "pointName";
		case 0xb5e093ed: 	return "weak_";

		case 0x9c58fe5d: 	return "questId";
		case 0x29f009a:		return "uiMessID";
		case 0xf0886a4a: 	return "ftTag";
		case 0xfb940ceb: 	return "markIdx";

		case 0x28af0e50: 	return "hackingLabel";
		case 0xaf2d5441: 	return "hackingLabelNo";
		case 0x44cbb112: 	return "questNo";
		case 0xb8fbc4cb: 	return "ActiveHackFlag";
		case 0x27bb1078: 	return "Direct";

		case 0x84f10266: 	return "bezier_";
		case 0xa70de45f: 	return "bezierCreatedCenter_";
		case 0x58aeaa1a: 	return "bezierCreatedFront_";
		case 0x51c9e193: 	return "bezierCreatedUp_";
		case 0xaf86e883: 	return "locationStart_";
		case 0x7225d9d5: 	return "locationLoop_";
		case 0x193be190: 	return "locationEnd_";
		case 0xeea95834: 	return "offsetStart_";
		case 0x59ef0e7e: 	return "offsetLoop_";
		case 0x67b6d82a: 	return "offsetEnd_";
		case 0x9d9ed7eb: 	return "loopNum_";
		case 0xaaaf51be: 	return "reverse_";
		case 0x64dbc36e: 	return "startAttack_";
		case 0xde0f3f36: 	return "endAttack_";
		case 0x2e3d35fa: 	return "stayTime_";
		case 0x17f52599: 	return "rotRate_";
		case 0x7d07d23f: 	return "speed_";
		case 0x54ce91e:		return "dirType_";
		case 0xf9648678: 	return "moveType_";
		case 0x3c91243c: 	return "moveSpeed_";
		case 0x3b1ba020: 	return "moveRadius_";
		case 0xad6f1ea1: 	return "shotType_";
		case 0xe988791d: 	return "shotTime_";
		case 0x5b1be310: 	return "shotInterval_";
		case 0x513483a:	 	return "shotReload_";
		case 0x3f4ca0ee: 	return "shotWait_";
		case 0xe22badd3: 	return "shotSpeedScale_";
		case 0x1ece48f0: 	return "shotShakeRadius_";
		case 0xaba61cb8: 	return "shotShakeAngle_";
		case 0x74e47d2:	 	return "shotStrongRate_";
		case 0x1af7935c: 	return "nodeComeSpeed_";
		case 0x430927a:	 	return "nodeLeaveSpeed_";
		case 0x344b241d: 	return "parameter_";
		case 0x610830e4: 	return "debug_";
		case 0xc3ca45d4: 	return "shotSpeed_";
		case 0xbf21deaa: 	return "resetControls_";

		case 0x665648e9: 	return "color";
		case 0xf26fef6: 	return "speed";
		case 0x645694b0: 	return "bNoFade";
	
		case 0x96b41ece: 	return "slowly_";
		case 0xdb999a73: 	return "upRoute_";
		case 0x36a6940a: 	return "startArea";
		case 0x4c4c4ed1: 	return "endArea";
		case 0x23e9f076: 	return "speedInterpTime_";
		case 0xdcb776e2: 	return "speedInterpType";
		case 0x2d111767: 	return "distanceX";
		case 0x79a1e4d3: 	return "distanceFront";
		case 0x3feb36a6: 	return "distanceBack";
		case 0xefe4843c: 	return "boss_";
		case 0xd149284f: 	return "bossCameraAngleY_";
		case 0x801a58a1: 	return "bossCameraAngleMaxX_";
		case 0x5c47d49b: 	return "bossCameraResetWaitX_";
		case 0x7825b3e4: 	return "bossCameraResetTimeX_";
		case 0xbab6ab24: 	return "bossCameraResetTypeX_";
		case 0x990169e0: 	return "bossCameraAngleMaxY_";
		case 0x455ce5da: 	return "bossCameraResetWaitY_";
		case 0x613e82a5: 	return "bossCameraResetTimeY_";
		case 0xa3ad9a65: 	return "bossCameraResetTypeY_";
		case 0xa876749c: 	return "vertical";
		case 0xf7cd553:		return "intercept";
		case 0x7a08c3fc: 	return "fighter";
		case 0x5b00e8da: 	return "fighterVertical";
		case 0x3b29c072: 	return "fighterVerticalLimitUp";
		case 0xf21f87cb: 	return "fighterVerticalLimitDown";
		case 0xa81a7ba2: 	return "fixCamFront_";
		case 0x4b9fa607: 	return "fixCamFrontOffsetAngle_";
		case 0xc930478d: 	return "fixCamFrontInterpAccel_";
		case 0x41fecf80: 	return "fixCamFrontInterpTime_";
		case 0x2668093c: 	return "bulletScalePlayer_";
		case 0xa06dbdd2: 	return "bulletScaleEnemy_";
		case 0xd56d8b2:	 	return "bulletAttackScale_";
		case 0x3450c37d: 	return "enemyPathHeightUse_";
	
		case 0xed9fb06e: 	return "nParts";
		case 0xc3faa1cd: 	return "stopFrame";
		case 0x817cd0f7: 	return "dist";
		case 0xfef5de8f: 	return "unkn_areaDist";
		case 0x29b6e3a7: 	return "unkn_resetDist";
		case 0xa89e128c: 	return "unkn_searchDist";
		case 0xe1efc840: 	return "unkn_guardSDist";
		case 0x35fc813:	 	return "unkn_guardLDist";
		case 0x43f644ee: 	return "tutorialLine0";
		case 0x34f17478: 	return "tutorialLine1";
		case 0xadf825c2: 	return "tutorialLine2";
		case 0xdaff1554: 	return "tutorialLine3";
		case 0x449b80f7: 	return "tutorialLine4";
		case 0x339cb061: 	return "tutorialLine5";
		case 0x2f0f826f: 	return "time_";
		case 0x760cc7df: 	return "rate_";
		case 0x5b5aff68: 	return "codeName";
		case 0xa036e2d4: 	return "transporter";
		case 0x40325317: 	return "rot_max_";
		case 0xe3451dfa: 	return "rot_max_";
		case 0xb67e7a1:	 	return "rot_spd_";
		case 0xcb80cd6:	 	return "length_";
		case 0xfc3bf852: 	return "rotX_";
		case 0xbe375015: 	return "addRotSpd_";
		case 0x6467cf26: 	return "addRotSpd_";
		case 0x21d1bc3:	 	return "addLenSpd_";
		case 0xe2428320: 	return "addLenSpd_";
		case 0xa2510a3f: 	return "handBlur_";
		case 0xb23b53fb: 	return "handBlur_";
		case 0xcca8a417: 	return "handBlurRate_";
		case 0x49c8536c: 	return "handBlurSpdRate_";
		case 0x87841197: 	return "handBlurRate_";
		case 0x8d317b09: 	return "waveXMax_";
		case 0xc664cfbf: 	return "waveXSpd_";
		case 0x66ddb40a: 	return "radiusMax";
		case 0x5ad08b53: 	return "radiusMin";
		case 0x19c6efcb: 	return "interval";
		case 0xef8f7e2a: 	return "amo";
		case 0x4d331e6:	 	return "readyTime";
		case 0x710ae3b6: 	return "loopTime";
		case 0x9de8eefe: 	return "thin";
		case 0xe284468:	 	return "entity";
		case 0x6257fe26: 	return "connectType_";
		case 0xccb6e5d9: 	return "frame_";
		case 0xaf5c7bf6: 	return "offset_";
		case 0xf74e7656: 	return "maxX_";
		case 0xee554717: 	return "maxY_";
		case 0x6ad0de1a: 	return "timer";
		case 0x17d9eb2:	 	return "length";
		case 0xd8cce934: 	return "collec";
		case 0xfafde884: 	return "cond";
		case 0xd7e6d0c2: 	return "bOnce";
		case 0x2dca8bc8: 	return "subPhaseName";
		case 0x9178a37e: 	return "fadeType";
		case 0xfa349c55: 	return "fadeSpeed";
		case 0x3c0be965: 	return "filename";

		case 0x1edbf000: 	return "worldType";
		case 0x8890c10e: 	return "camType";
		case 0xb1bdd6cb: 	return "phase";
		case 0xa7c4efbc: 	return "skipSubPhase_1";
		case 0xcce82c83: 	return "skipIndex_1";
		case 0x3ecdbe06: 	return "skipSubPhase_2";
		case 0x55e17d39: 	return "skipIndex_2";
		case 0x49ca8e90: 	return "skipSubPhase_3";
		case 0x22e64daf: 	return "skipIndex_3";
		case 0xd7ae1b33: 	return "skipSubPhase_4";
		case 0xbc82d80c: 	return "skipIndex_4";
		case 0xa0a92ba5: 	return "skipSubPhase_5";
		case 0xcb85e89a: 	return "skipIndex_5";
		case 0x401da563: 	return "startObjPos";
		case 0xfc4d6532: 	return "collection";
		case 0xd24483a4: 	return "bgType";
		case 0x3f713570: 	return "bgAssetType";
		case 0x80736701: 	return "index";
		case 0xa857b3c0: 	return "repeat";
		// case 0x: 	return "";
		default:			return "?";
	}
}

string makeIndentStr(uint32 indents) {
	local uint32 i;
	local string s = "";
	for (i = 0; i < indents; i++) {
		s += "	";
	}
	return s;
}

string getNodeText(uint32 offset) {
	if (offset == 0)
		return "";
	return ReadString(offset);
}

string PrettyPrintXmlNode (struct XmlNode& entry) {
	local string tagName = getTagName(entry.tagNameOffsetOrId);
	local string indentStr = makeIndentStr(entry.indentation);
	local string text = getNodeText(entry.stringOffset);
	local string s = indentStr + "<" + tagName + ">" + text + "</" + tagName + ">";
	return s;
}

struct XmlNode {
	ubyte indentation;
	uint32 tagNameOffsetOrId;
	uint32 stringOffset;
};

uint32 nodeCount;

XmlNode nodes[nodeCount] <name=PrettyPrintXmlNode>;

struct String {
	string s;
};

struct {
	while (!FEof()) {
		String s;
	}
} Strings;
