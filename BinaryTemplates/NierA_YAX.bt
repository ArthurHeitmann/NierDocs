// YAX - Yet Another Xml encoding

string getTagName(uint32 id) {
	local uint32 i;
	switch (id) {
		case 0x5E237E06: 	return "name";
		case 0xBF396750: 	return "id";
		case 0x6DC044C5: 	return "group";
		case 0xF7C0246A: 	return "size";
		case 0x47CC8C92: 	return "action";
		case 0x77153098: 	return "code";
		case 0xFA7AEFFB: 	return "attribute";
		case 0xD7943D68: 	return "area";
		case 0x1D775834: 	return "value";
		case 0x462CE4F5: 	return "position";
		case 0x297C98F1: 	return "rotation";
		case 0xEC462584: 	return "scale";
		case 0x27BA8E29: 	return "points";
		case 0xF54DE50F: 	return "height";
		case 0xE18651F2: 	return "StageType";
		case 0xA213B07: 	return "AreaType";
		case 0x624B37F2:	return "objID";
		case 0x85D94462:	return "count";
        case 0x5E9E89CB:    return "location";
        case 0x55307634:    return "layouts";
        case 0x4317F817:    return "quest";
        case 0x8CDE5729:    return "type";
        case 0x58EBF836:    return "type2";
        case 0xC87C17FD:    return "terminateArea";
        case 0x218568E4:    return "normal";
        case 0x0B0541BA:    return "flags";
        case 0x3D8E604F:    return "parent";
        case 0xA4FA7C89:    return "param";
        case 0xDBA80BB2:    return "body";
        case 0xC1151FD2:    return "hard";
        case 0x6F0E5340:    return "extream";
        case 0x4B748449:    return "bForwardState";
		// case 0x: 	return "";
		default:			return "?";
	}
}

string makeIndentStr(uint32 indents) {
	local uint32 i;
	local string s = "";
	for (i = 0; i < indents; i++) {
		s += "    ";
	}
	return s;
}

string getNodeText(uint32 offset) {
	if (offset == 0)
		return "";
	return ReadString(offset);
}

string PrettyPrintXmlNode (struct XmlNode& entry) {
	local string tagName = getTagName(entry.tagNameOffsetOrId);
	local string indentStr = makeIndentStr(entry.indentation);
	local string text = getNodeText(entry.stringOffset);
	local string s = indentStr + "<" + tagName + ">" + text + "</" + tagName + ">";
	return s;
}

struct XmlNode {
	ubyte indentation;
	uint32 tagNameOffsetOrId;
	uint32 stringOffset;
};

uint32 nodeCount;

XmlNode nodes[nodeCount] <name=PrettyPrintXmlNode>;

struct String {
	string s;
};

struct {
	while (!FEof()) {
		String s;
	}
} Strings;
