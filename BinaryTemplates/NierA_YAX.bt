// YAX - Yet Another Xml encoding

string getTagName(uint32 id) {
	local uint32 i;
	switch (id) {
		case 0x5E237E06: 	return "name";
		case 0xBF396750: 	return "id";
		case 0x6DC044C5: 	return "group";
		case 0xF7C0246A: 	return "size";
		case 0x47CC8C92: 	return "action";
		case 0x77153098: 	return "code";
		case 0xFA7AEFFB: 	return "attribute";
		case 0xD7943D68: 	return "area";
		case 0x1D775834: 	return "value";
		case 0x462CE4F5: 	return "position";
		case 0x297C98F1: 	return "rotation";
		case 0xEC462584: 	return "scale";
		case 0x27BA8E29: 	return "points";
		case 0xF54DE50F: 	return "height";
		case 0xE18651F2: 	return "StageType";
		case 0xA213B07: 	return "AreaType";
		case 0x624B37F2:	return "objID";
		case 0x85D94462:	return "count";
		case 0x5E9E89CB:    return "location";
		case 0x55307634:    return "layouts";
		case 0x4317F817:    return "quest";
		case 0x8CDE5729:    return "type";
		case 0x58EBF836:    return "type2";
		case 0xC87C17FD:    return "terminateArea";
		case 0x218568E4:    return "normal";
		case 0x0B0541BA:    return "flags";
		case 0x3D8E604F:    return "parent";
		case 0xA4FA7C89:    return "param";
		case 0xDBA80BB2:    return "body";
		case 0xC1151FD2:    return "hard";
		case 0x6F0E5340:    return "extream";
		case 0x4B748449:    return "bForwardState";
		case 0xAA5A118E:    return "tokens";
		case 0x7F5E0E38:    return "resetArea";
		case 0x24146479:    return "resetType";
		case 0x62A6DC27:    return "priority";
		case 0xBDD68843:    return "condition";
		case 0xE6A1A094:    return "puid";
		case 0xA393D2FB:    return "state";
		case 0x0EA750E8:    return "label";
		case 0x4F5BF91D:    return "pred";
		case 0xB29A809B:    return "delay";
		case 0xEA78D31C:    return "bDisable";
		case 0x8ECAEAD4:    return "command";
		case 0x161B2EA2:    return "args";
		case 0x9A3E132C:    return "commands";
		case 0xE11EE94D:    return "items";
		case 0x6BE8E5D3:    return "type_";
		case 0xF46609A9:    return "conditions";
		case 0x192FEA25:    return "setType";
		case 0xE16C6B94:    return "alias";
		case 0x9D762289:    return "max";
		case 0x079A1B49:    return "setFlag_setRtn";    // More likely to be setFlag for now
		case 0x2B806C26:    return "parentID";
		case 0x3B7C6E5A:    return "radius";
		case 0x659429DB:    return "icon";
		case 0xC6C6ECF1:    return "purposeIdx";
		case 0x1C81873A:    return "script";
		case 0x88CB7D11:    return "variables";
		case 0xF3BDF423:    return "eventNo";
		case 0x6DECFE4B:    return "startType";
		case 0x0ACF1615:    return "subPhase";
		case 0x666016A9:    return "loadArea";
		case 0xF68803D6:    return "connectWalkDist_";
		case 0x26961117:    return "connectWalkCaptionWait_";

		case 0x1DF0B5A4:    return "?? bStop";
		case 0xB1BDD6CB:    return "?? phase";
		case 0x9D4BDE90:    return "?? releaseWhenLeaveLoadArea";

		case 0x57655AB9:    return "???? upDirection";

		case 0xA5646B84:    return "Rotation_X";
		case 0xD2635B12:    return "Rotation_Y";
		case 0x8C0C4308:    return "Fovy";
		case 0xE5E4F8D7:    return "Distance";
		case 0x80D9E6AC:    return "pos";
		case 0x6E545368:    return "tar";
		case 0x1F72D9A1:    return "usePos";
		case 0x576DEC6C:    return "useTarget";
		case 0x4E3E07BD:    return "interRate";
		case 0x2BC18006:    return "overwrite";
		case 0x590ACAD0:    return "offset";
		case 0xA488375A:    return "disableBattle";
		case 0x7C5E24BB:    return "useLimit";
		case 0xB4D00051:    return "limitTime";
		case 0xEDF7CF4D:    return "accType";
		case 0x292EE151:    return "playerStop";
		case 0x49A66FE5:    return "actionCamStop";
		// case 0x: 	return "";
		default:			return "?";
	}
}

string makeIndentStr(uint32 indents) {
	local uint32 i;
	local string s = "";
	for (i = 0; i < indents; i++) {
		s += "    ";
	}
	return s;
}

string getNodeText(uint32 offset) {
	if (offset == 0)
		return "";
	return ReadString(offset);
}

string PrettyPrintXmlNode (struct XmlNode& entry) {
	local string tagName = getTagName(entry.tagNameOffsetOrId);
	local string indentStr = makeIndentStr(entry.indentation);
	local string text = getNodeText(entry.stringOffset);
	local string s = indentStr + "<" + tagName + ">" + text + "</" + tagName + ">";
	return s;
}

struct XmlNode {
	ubyte indentation;
	uint32 tagNameOffsetOrId;
	uint32 stringOffset;
};

uint32 nodeCount;

XmlNode nodes[nodeCount] <name=PrettyPrintXmlNode>;

struct String {
	string s;
};

struct {
	while (!FEof()) {
		String s;
	}
} Strings;
