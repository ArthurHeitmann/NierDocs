/*
UiData
*/

LittleEndian();

const int color1 = 0xEBA434;
const int color2 = 0xEBA454;
const int color3 = 0xEB6434;
const int color4 = 0x64EB34;
const int color5 = 0x64EB54;
const int color6 = 0x64AB14;

string inverseToStr(float f) {
	if (f == 0)
		return "0.0";
	string s = "";
	float inv = 1.f / f;
	SPrintf(s, "%f", inv);
	return s;
}

struct Vector;
string vectorToStr(const Vector& v) {
	string s = "";
	SPrintf(s, "(%.02f, %.02f, %.02f)", v.x, v.y, v.z);
	return s;
}

struct Vector
{
	float x;
	float y;
	float z;
};

struct Header
{
	uint32 size1;
	uint32 size2;
	uint32 size3;
	uint32 u_0;
	uint32 offset1;
	uint32 offset2;
	uint32 offset3;
	uint32 null0;
	float frameDuration_maybe<comment="1 / 60 FPS">;
	float width_maybe;
	float height_maybe;
	uint32 null3;
};

Header header;

struct Data1;
struct Data2;
struct Data3;
struct Data3Header;
struct Data3Entry;
struct Entry1
{
	Vector translation<read=vectorToStr>;
	Vector rotation<read=vectorToStr>;
	Vector scale<read=vectorToStr>;
	Vector RGB<read=vectorToStr>;
	float alpha;
	float moreFloats[4];
	struct {
		int32 entry2_layerId1;		// 0
		uint32 entry2_layerId2;		// 1
		uint32 const0_1;			// 2
		uint32 range1_0_to_9;		// 3
		uint32 null2;				// 4
		uint32 range3_0_to_2;		// 5
		uint32 u4;					// 6
		/*
		_____0__	top edge centered
		_____1__	Y centered
		____1___	bottom edge centered
		___0____	left edge centered
		___1____	X centered
		__1_____	right edge centered
		_1______	Row
		1_______	Column
		*/
		uint32 layoutType<comment="See BT source code for layout types">;	// 7
		float float7;				// 8
		uint32 bool8;				// 9
		uint32 bool9;				// 10
		uint32 bool10;				// 11
		uint32 bool11;				// 12
		uint32 const12_1;			// 13
		uint32 bool13;				// 14
		uint32 bool14;				// 15
		uint32 const15_1;			// 16
		uint32 bool16;				// 17
		uint32 bool17;				// 18
		uint32 bool18;				// 19
		uint32 bool19;				// 20
		float float20;				// 21
		uint32 bool21;				// 22
		float float22;				// 23
		uint32 bool23;				// 24
		float float24;				// 25
		uint32 u25;					// 26
		float float26;				// 27
		uint32 u27;					// 28
		float float28;				// 29
		uint32 u29;					// 30
		float float30;				// 31
		uint32 bool31;				// 32
		float float32;				// 33
		uint32 bool33;				// 34
		float float34;				// 35
		uint32 bool35;				// 36
		float float36;				// 37
		uint32 bool37;				// 38
		float float38;				// 39
		uint32 bool39;				// 40
		uint32 null40;				// 41
		uint32 null41;				// 42
		uint32 null42;				// 43
		uint32 null43;				// 44
		float float44;				// 45
		uint32 u45;					// 46
		float float46;				// 47
		uint32 u47;					// 48
		float float48;				// 49
		uint32 u49;					// 50
		float float50;				// 51
		uint32 u51;					// 52
		float float52;				// 53
		uint32 u53;					// 54
		float float54;				// 55
		uint32 u55;					// 56
		float float56;				// 57
		uint32 u57;					// 58
		float float58;				// 59
		uint32 u59;					// 60
		float float60;				// 61
		uint32 u61;					// 62
		float float62;				// 63
		uint32 u63;					// 64
		float float64;				// 65
		uint32 u65;					// 66
		float float66;				// 67
		uint32 u67;					// 68
		float float68;				// 69
		uint32 u69;					// 70
		float float70;				// 71
		uint32 u71;					// 72
		float float72;				// 73
		uint32 u73;					// 74
		float float74;				// 75
		uint32 u75;					// 76
		float float76;				// 77
		uint32 u77;					// 78
		float float78;				// 79
		uint32 u79;					// 80
		uint32 null80;				// 81
		uint32 null81;				// 82
		uint32 null82;				// 83
		uint32 null83;				// 84
		uint32 range84_0_to_6;		// 85
		uint32 u86;					// 86
		// uint32 range87_0_to_8;		// 87
	} bunchOfStuff;
	uint32 dataOffset1;
	if (dataOffset1 != 0)
		Printf("dataOffset1 = %d\n", dataOffset1);
	uint32 dataOffset2;
	if (dataOffset2 != 0)
		Printf("dataOffset2 = %d\n", dataOffset2);
	uint32 dataOffset3;
	if (dataOffset3 != 0)
		Printf("dataOffset3 = %d\n", dataOffset3);
	uint32 u_4;
	if (u_4 != 0)
		Printf("u_4 = %d\n", u_4);

	local int pos = FTell();
	if (dataOffset1 != 0) {
		FSeek(dataOffset1);
		Data1 data1<bgcolor=color4>;
	}
	if (dataOffset2 != 0) {
		FSeek(dataOffset2);
		Data2 data2<bgcolor=color5>;
	}
	if (dataOffset3 != 0) {
		FSeek(dataOffset3);
		Data3 data3<bgcolor=color6>;
	}
	FSeek(pos);
};
struct Data1
{
	// variable length; what length? lol
	// sometimes this
	float spriteWidth;
	float spriteHeight;
	uint32 u_2[17];		// [6]: 0 or ID from .uvd
	// other times a char[24]
	// and sometimes a float & a string :D
};
struct Data2
{
	uint32 u_0;
	uint32 u_1;
	uint32 u_2;
	uint32 u_3[3];
	float f_4;
	float f_5;
	float f_6;
	float f_7;
	float f_8;
	float f_9;
	float f_10;
	uint32 u_11;
};

struct Data3
{
	local int firstOffset = ReadInt();
	local int entriesCount = (firstOffset - FTell()) / 32;
	Data3Header headers[entriesCount];
	local int i = 0;
	for (i = 0; i < entriesCount; i++) {
		struct {
			FSeek(headers[i].beginOffset);
			Data3Entry subEntries[headers[i].size1];
		} entries;
	}
};

enum Data3PropertyIndex {
	Translation_X = 0,
	Translation_Y = 1,
	Translation_Z = 2,
	Rotation_X = 3,
	Rotation_Y = 4,
	Rotation_Z = 5,
	Scale_X = 6,
	Scale_Y = 7,
	Scale_Z = 8
};
// potentially animation data
struct Data3Header
{
	uint32 beginOffset;
	uint32 size1;
	Data3PropertyIndex propertyIndex;
	float minValue;
	float maxValue;
	float startTime;
	float endTime;
	uint32 u_3;
};
struct Data3Entry
{
	float time;
	uint16 val;
	uint16 u_0;
};


// maybe stack order?
struct Entry2
{
	uint32 layerId;
	uint32 entry1_index;
};

struct Entry3
{
	uint32 entry2_index_maybe;
	float f_0;
	float f_1;
	uint32 u_1[13];
};


FSeek(header.offset1);
struct {
	Entry1 entries[header.size1]<bgcolor=color1, optimize=false>;
} entries1;

FSeek(header.offset2);
Entry2 entries2[header.size2]<bgcolor=color2>;

FSeek(header.offset3);
Entry3 entries3[header.size3]<bgcolor=color3>;
