/*
Binary XML
Used for all sorts of config files
*/

BigEndian();

struct Header {
  char      id[4];
  uint32    unknown;
  uint16    nodeNumber;
  uint16    dataNumber;
  uint32    dataSize;
} header;

local uint32 infosOffset =   0x10;
local uint32 dataOffOffset = 0x10 + 8*header.nodeNumber;
local uint32 stringsOffset = 0x10 + 8*header.nodeNumber + header.dataNumber * 4;

string dataOffToStr(const struct DataOffsets& off) {
	if (exists(off.name) && exists(off.value)) {
		return Str("DataOffset - %s: %s    ", off.name, off.value);
	} else if (exists(off.name)) {
		return Str("DataOffset - %s:    ", off.name);
	} else if (exists(off.value)) {
		return Str("DataOffset - :%s    ", off.value);
	} else {
		return Str("DataOffset -    ");
	}
	
}

struct DataOffsets {
	uint16 nameOffset;
	uint16 dataOffset;
	local int pos = FTell();
	if (nameOffset != 0xFFFF) {
		FSeek(stringsOffset + nameOffset);
		string name;
	}
	if (dataOffset != 0xFFFF) {
		FSeek(stringsOffset + dataOffset);
		string value;
	}
	FSeek(pos);
};

FSeek(dataOffOffset);
struct {
	local int i;
	for (i = 0; i < header.dataNumber; i++) {
		DataOffsets o <name=dataOffToStr(this)>;
	}
} dataOffsets;

struct {
	while (FTell() < FileSize()) {
		struct {
			string str<name=Str("str_%s", this)>;
		} str_;
	}
} Strings;

struct NodeInfo;
string readNodeInfo(const NodeInfo& info) {
	string str = "";
	string text = "";
	if (exists(info.tagValue))
		text = info.tagValue;
	SPrintf(str, "NodeInfo <%s>%s", info.tagName, text);
	return str;
}
struct Attribute;
string readAttribute(const Attribute& attr) {
	string str = "";
	string text = "";
	if (exists(attr.value))
		text = attr.value;
	SPrintf(str, "%s=\"%s\"", attr.name, text);
	return str;
}

FSeek(infosOffset);
local int i, j;
local int pos = FTell();
struct {
	for (i = 0; i < header.nodeNumber; i++) {
		struct NodeInfo {
			FSeek(pos);
			int16   childNumber;
			uint16   firstChildIndex;
			uint16   attributeNumber;
			uint16   dataIndex;

			pos = FTell();
			// tag name
			FSeek(stringsOffset + dataOffsets.o[dataIndex].nameOffset);
			string tagName;
			if (dataOffsets.o[dataIndex].dataOffset != 0xFFFF) {
				FSeek(stringsOffset + dataOffsets.o[dataIndex].dataOffset);
				string tagValue;
			}
			for (j = 0; j < attributeNumber; j++) {
				FSeek(pos);
				struct Attribute {
					FSeek(stringsOffset + dataOffsets.o[dataIndex + 1 + j].nameOffset);
					string name;
					if (dataOffsets.o[dataIndex + 1 + j].dataOffset != 0xFFFF) {
						FSeek(stringsOffset + dataOffsets.o[dataIndex + 1 + j].dataOffset);
						string value;
						if (dataOffsets.o[dataIndex + 1 + j].nameOffset > dataOffsets.o[dataIndex + 1 + j].dataOffset) {
							FSeek(stringsOffset + dataOffsets.o[dataIndex + 1 + j].nameOffset);
						}
					}
				// } Attribute <name=Str("%s=\"%s\"", this.name, this.value)>;
				} attribute <name=readAttribute>;
			}
			FSeek(pos);
		// } NodeInfo <name=Str("NodeInfo <%s>", this.tagName)>;
		} nodeInfo<name=readNodeInfo>;
	}
} NodeInfos;

