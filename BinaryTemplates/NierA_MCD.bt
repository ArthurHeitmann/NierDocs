/*
For localization of UI elements/text with different fonts.
*/

// based on https://github.com/synspawacza/nier_automata_localization/blob/master/tools/format/mcd.py

// Order of tables (not all in header) (no byte alignment):
//    <name>,     <zero terminator>
// 0. Header
// 1. Letters,    [0x0000] or [0x00000000] (4 byte alignment)
// 2. Messages,   [0x00000000]
// 3. Paragraphs, [0x00000000]
// 4. Lines,      [0x00000000]
// 5. Symbols,    [0x00000000]
// 6. Glyphs,     [0x00000000]
// 7. Fonts,      [0x00000000]
// 8. Events

struct Header {
	uint32 messagesOffset<format=hex>;
	uint32 messagesCount<format=hex>;
	uint32 symbolsOffset<format=hex>;
	uint32 symbolsCount<format=hex>;
	uint32 glyphsOffset<format=hex>;
	uint32 glyphsCount<format=hex>;
	uint32 fontsOffset<format=hex>;
	uint32 fontsCount<format=hex>;
	uint32 eventsOffset<format=hex>;
	uint32 eventsCount<format=hex>;
};

struct Paragraph;
struct Line;

struct Letter {
    uint16 code;
    short kerning;
};
struct Message {
    uint32 paragraphsOffset<format=hex>;
    uint32 paragraphsCount<format=hex>;
    uint32 seqNumber;
    uint32 eventId<format=hex>;
    
    local int pos = FTell();
    FSeek(paragraphsOffset);

    Paragraph p[paragraphsCount] <read=readParagraph, optimize=false>;;

    FSeek(pos);
};
struct Paragraph {
    uint32 linesOffset<format=hex>;
    uint32 linesCount<format=hex>;
    uint32 vpos;
    uint32 hpos;
    uint32 font;

    local int pos = FTell();
    FSeek(linesOffset);

    Line lines[linesCount] <read=readLine, optimize=false>;

    FSeek(pos);
};
struct Line {
    uint32 lettersOffset<format=hex>;
    uint32 padding;
    uint32 lettersCount<format=hex>;
    uint32 length2;
    float below;
    float horiz;

    local int pos = FTell();
    FSeek(lettersOffset);
    
    local int letCount = (lettersCount - 1) / 2;
    if (letCount > 0)
        Letter letters[letCount]<read=readLetter2>;
    uint16 terminator<format=hex>;

    FSeek(pos);
};

struct Symbol {
    uint16 fontId;
    wchar_t code;
    uint32 glyphId;
};
struct Glyph {
	uint32 textureId<format=hex>;
	float u1;
	float v1;
	float u2;
	float v2;
	float width;
	float height;
	float above;
	float below;
	float horiz;
};
struct Font {
	uint32 id;
	float width;
	float height;
	float below;
	float horiz;
};

struct Event {
	uint32 id<format=hex>;
	uint32 msgId;
	char name[32];

    local int pos = FTell();
    FSeek(header.messagesOffset + msgId * 4 * 4);
    
    Message m<read=readMessage>;
    
    FSeek(pos);
};

Header header;

struct {
    while (FTell() + 4 < header.messagesOffset) {
        if (ReadUShort() == 0x8000) {
            uint16 terminator<format=hex>;
            continue;
        }
        Letter letter<read=readLetter2>;
    }
} letters;

FSeek(header.messagesOffset);
struct {
    Message ms[header.messagesCount] <read=readMessage, optimize=false>;
} messages;

FSeek(FTell() + 4);
struct {
    while (ReadUInt() != 0)
        Paragraph p<read=readParagraph, optimize=false>;
} paragraphs;

FSeek(FTell() + 4);
struct {
    while (ReadUInt() != 0)
        Line l<read=readLine, optimize=false>;
} lines;

FSeek(header.symbolsOffset);
Symbol symbols[header.symbolsCount]<read=readSymbol>;

FSeek(header.glyphsOffset);
Glyph glyphs[header.glyphsCount]<read=readGlyph>;

FSeek(header.fontsOffset);
Font fonts[header.fontsCount]<read=readFont>;

FSeek(header.eventsOffset);
struct Events {
    Event e[header.eventsCount] <read=readEvent, optimize=false>;
} e;

wstring readSymbol(Symbol& sym) {
    wstring s = L"";
    s += sym.code;
    string s2 = "";
    SPrintf(s2, L"   (f: %d)   (g: %d)", sym.fontId, sym.glyphId);
    s += s2;
    return s;
}
string readGlyph(Glyph& g) {
    string s = "";
    SPrintf(s, L"%.0f x %.0f   %.0f, %.0f, %.0f", g.width, g.height, g.above, g.below, g.horiz);
    return s;
}
string readFont(Font& f) {
    string s = "";
    SPrintf(s, L"%d   %.0f x %.0f   %.0f, %.0f", f.id, f.width, f.height, f.below, f.horiz);
    return s;
}
wstring readLetter(Letter &let) {
    wstring s = L"";
    if(let.code < 0x8000 && let.code < sizeof(symbols)) {
        if (symbols[let.code].code == 0x80)
            s += L"...";
        else
            s += symbols[let.code].code;
    } else if (let.code == 0x8001) {
        s += L' ';
    } else if (let.code == 0x8020) {
        switch (let.kerning) {
        case 9:
            s += "â‰¡"; // controller menu button
            break;
        case 121:
            s += L"<Alt>";
            break;
        default:
            string s2 = L"";
            SPrintf(s2, L"<Special_0x%x_%d>", let.code, let.kerning);
            s += s2;
            break;
        }
    } else {
        string s2 = L"";
        SPrintf(s2, L"<Special_0x%x_%d>", let.code, let.kerning);
        s += s2;
    }
    return s;
}
string readLetter2(Letter &let) {
    string s = L"";
    SPrintf(s, "%s (%d)", readLetter(let), let.kerning);
    wstring s2 = s;
    return s2;
}
wstring readLine(Line &str) {
    wstring s = L"";
    int i = 0;
    for(i = 0; i < (str.lettersCount - 1)/2; i++)
        s += readLetter(str.letters[i]);
    return s;
}
string readParagraph(Paragraph &para) {
    string s = "";
    if (para.linesCount == 1)
        SPrintf(s, "1 line \"%s\"", readLine(para.lines[0]));
    else
        SPrintf(s, "%d lines", para.linesCount);
    return s;
}
string readMessage(Message &msg) {
    string s = "";
    SPrintf(s, "%d p (", msg.paragraphsCount);
    local int i = 0;
    for(i = 0; i < msg.paragraphsCount; i++) {
        if(i != 0)
            s += ", ";
        s += readParagraph(msg.p[i]);
    }
    s += ")";
    return s;
}
string readEvent(Event &evt) {
    string s = "";
    SPrintf(s, "%s: %s", evt.name, readMessage(evt.m));
    return s;
}
