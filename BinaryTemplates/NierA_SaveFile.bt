/*
For SlotData_X.dat save files
*/


const int color1 = 0xEBA434;
const int color2 = 0xEB6434;

int32 null;

// Start of "common" header in GameData.dat
uint64 steamID64<bgcolor=color1>;
FSeek(0x10);
int16 counter;
int16 pad0[5];
struct LastPlayedAt
{
	ubyte day;
	ubyte month;
	ushort year;
} lastPlayedAt<bgcolor=color1>;

int32 pad1;
// end
// start of peak header in GameData.dat
int32 playedTime_seconds<bgcolor=color1>;
uint32 u0<bgcolor=color1>;
int32 chapter<bgcolor=color1>;
uint32 u1;
wchar_t name[35]<bgcolor=color1>;
uint16 u2;
// end


char dynamicText[0x30000]<bgcolor=color2>;
Printf("%s\n", dynamicText);


FSeek(0x3056C);
int32 money<bgcolor=color1>;
FSeek(0x3871C);
int32 experience<bgcolor=color1>;


FSeek(0x30570);
enum ItemStatus {
	active = 0x00070000,
	inactive = -1
};
struct InventoryItem {
	int32 id;
	ItemStatus status<comment="0x00070000 = active, -1 = inactive">;
	int32 quantity;
};

local int i = 0;
InventoryItem inventory[256]<bgcolor=color1>;

FSeek(0x31170);
InventoryItem corpseInventory[256]<bgcolor=color1>;

FSeek(0x31D70);
struct Weapon (int index) {
	local int i = index;
	int32 id;
	int32 level;
	int32 newItem;
	int32 newStory;
	int32 enemiesDefeated;
};
struct {
	for (i = 0; i < 80; i++) {
		Weapon weapon(i)<read=weaponPretty, bgcolor=color1>;
	}
} Weapons;

struct PodProgram {
	int32 one;
	int32 id;
};
PodProgram podPrograms[32]<bgcolor=color1>;


FSeek(0x324BC);
struct Chip {
	int32 baseCode;
	int32 baseId;
	int32 type;
	int32 level;
	int32 weight;
	int32 slotA;
	int32 slotB;
	int32 slotC;
	int32 corpseSlotA;
	int32 corpseSlotB;
	int32 corpseSlotC;
	int32 destroyOnCorpseLost_maybe;
};
Chip chips[300]<bgcolor=color1>;

enum DressModule {
	usingDressModule = 0,
	default_ = 1
};

enum Outfit2B {
	default2B = 0,
	revealing = 1,
	armor = 2,
	armorNoHelmet = 3,
};
enum Outfit9S {
	default9S = 0,
	youngBoy = 1,
};

enum HeadAccessory {
	noAccessory = 0x00,
	lunarTear = 0x01,
	sandMask = 0x02,
	machineMask = 0x04,
	alienMask = 0x07,
	valveLeftEye = 0x08,
	valveRightEye = 0x09,
	valveBothEyes = 0x0A,
	valveHead = 0x0B,
	pinkRibbon = 0x0C,
	blueRibbon = 0x0D,
	camouflageGoggles = 0x0E
};

enum <ubyte> HairColor {
	white = 0,
	black = 1,
	brown = 2,
	red = 3,
	blue = 4,
	green = 5,
	purple = 6,
	ash = 7,
	golden = 8,
	pastelPink = 9,
	lightBlue = 10,
	limeGreen = 11,
	lightPurple = 12
};

enum PodCosmetic {
	defaultPod = -1,
	grimoire = 1,
	cardboard = 2,
	retroRed = 4,
	retroGrey = 7
};

FSeek(0x383DC);
struct OutfitConfig
{
	FSeek(0x383DC);
	DressModule dressModule2B<bgcolor=color1>;
	DressModule dressModule9S<bgcolor=color1>;
	DressModule dressModuleA2<bgcolor=color1>;
	uint32 bHasHeadAccessoryEquipped2B<bgcolor=color1>;
	uint32 bHasHeadAccessoryEquipped9S<bgcolor=color1>;
	uint32 bHasHeadAccessoryEquippedA2<bgcolor=color1>;
	HeadAccessory headAccessory2B<bgcolor=color1>;
	HeadAccessory headAccessory9S<bgcolor=color1>;
	HeadAccessory headAccessoryA2<bgcolor=color1>;
	Outfit2B outfit2B<bgcolor=color1>;
	Outfit9S outfit9S<bgcolor=color1>;
	uint32 outfitA2<bgcolor=color1>;
	FSeek(0x385F0);
	PodCosmetic podCosmetic2B<bgcolor=color1>;
	PodCosmetic podCosmetic9S<bgcolor=color1>;
	PodCosmetic podCosmeticA2<bgcolor=color1>;
	FSeek(0x3867C);
	HairColor hairColor<bgcolor=color1>;
	FSeek(0x3867F);
	ubyte bHasEmilBulletsEquipped<bgcolor=color1>;
} cosmetics;


FSeek(0x38558);
struct PlayRecords
{
	int32 itemsUsed;
	int32 itemsHarvested;
	int32 u5;
	int32 deaths;
	int32 u0;
	int32 u1;
	int32 enemiesKilled;
} playRecords<bgcolor=color1>;


FSeek(0x386F4);
struct WeaponSlot {
	int32 weaponId_lightAttack;
	int32 weaponId_heavyAttack;
};
WeaponSlot weaponSet1<bgcolor=color1>;
WeaponSlot weaponSet2<bgcolor=color1>;


FSeek(0x38728);
int32 pod1Level<bgcolor=color1>;
int32 pod2Level<bgcolor=color1>;
int32 pod3Level<bgcolor=color1>;
int32 pod1PodProgram<bgcolor=color1>;
int32 pod2PodProgram<bgcolor=color1>;
int32 pod3PodProgram<bgcolor=color1>;

struct Vector {
	float x;
	float y;
	float z;
	float w;
};

FSeek(0x3882C);
struct CorpseInfo
{
	int32 bHasCorpse_maybe<bgcolor=color1>;
	FSeek(0x3884C);
	char onlineName[128]<bgcolor=color1>;
	FSeek(0x388CC);
	wchar_t name[22]<bgcolor=color1>;
	FSeek(0x388F8);
	int32 unknown[13];
	Vector position<bgcolor=color1>;
	int32 unknown2[13];
} corpse;


FSeek(0x395f0);
uint32 globalPhase<bgcolor=color1, format=hex>;
char phase[32]<bgcolor=color1>;
char transporter[32]<bgcolor=color1>;
uint32 u4[2];
Vector position<bgcolor=color1>;
Vector rotation<bgcolor=color1>;

// SETTINGS
FSeek(0x3974c);
enum Difficulty {
	easy = 0,
	normal = 1,
	hard = 2,
	very_hard = 3
};
struct Settings {
	// > Game
	FSeek(0x3974c);
	Difficulty difficulty;
	int32 partnerNpcCombatStyle<comment="0 = Balanced, ..., 5 = Passive">;
	FSeek(0x39754);
	int32 bMiniMapRotation;
	// > Other
	int32 bSelfDestruct;
	FSeek(0x39760);
	// > Camera
	FSeek(0x39760);
	int32 verticalOrientation;
	int32 horizontalOrientation;
	// > Game
	int32 bVibration;
	// > Sound
	int32 musicVolume;
	int32 soundEffectVolume;
	int32 voiceVolume;
	int32 audioOutput;
	// > Camera
	FSeek(0x39788);
	int32 screenBrightness;
	int32 verticalMapControls;
	int32 horizontalMapControls;
	int32 leftStickMapControls;
	int32 distanceStandard;
	int32 distanceCombat;
	int32 verticalRotationSpeed;
	int32 horizontalRotationSpeed;
	int32 verticalAutoAdjust;
	int32 horizontalAutoAdjust;
	int32 freeEnemyTracking;
	int32 zoomSpeed;
	int32 u3;
	int32 pursuitSpeed;
	int32 lockedEnemyTracking;
	// > Game
	FSeek(0x397c8);
	int32 bInactivePlay;
	int32 bInactiveSound;
} settings<bgcolor=color1>;

string weaponPretty(Weapon& weapon) {
	string status = weapon.id == -1
		? "Not owned"
		: "Owned";
	string weaponName = getWeaponName(weapon.i);
	string out;
	SPrintf(out, "%s (%s) (Level %d, %d enemies defeated)", weaponName, status, weapon.level, weapon.enemiesDefeated);
	return out;
}

string getWeaponName(int i) {
	switch (i) {
		// arrays? maps??? what are those?
		case 0: return "Faith";
		case 1: return "Iron Pipe";
		case 2: return "Beastbane";
		case 3: return "Phoenix Dagger";
		case 4: return "Ancient Overlord";
		case 5: return "Type-40 Sword";
		case 6: return "Type-3 Sword";
		case 7: return "Virtuous Contract";
		case 8: return "Cruel Oath";
		case 9: return "YoRHa-issue Blade";
		case 10: return "Machine Sword";
		case 11: return "Iron Will";
		case 12: return "Fang of the Twins";
		case 13: return "Beastlord";
		case 14: return "Phoenix Sword";
		case 15: return "Type-40 Blade";
		case 16: return "Type-3 Blade";
		case 17: return "Virtuous Treaty";
		case 18: return "Cruel Blood Oath";
		case 19: return "Machine Axe";
		case 20: return "Phoenix Lance";
		case 21: return "Beastcurse";
		case 22: return "Dragoon Lance";
		case 23: return "Spear of the Usurper";
		case 24: return "Type-40 Lance";
		case 25: return "Type-3 Lance";
		case 26: return "Virtuous Dignity";
		case 27: return "Cruel Arrogance";
		case 28: return "Machine Spear";
		case 29: return "Angel's Folly";
		case 30: return "Demon's Cry";
		case 31: return "Type-40 Fists";
		case 32: return "Type-3 Fists";
		case 33: return "Virtuous Grief";
		case 34: return "Cruel Lament";
		case 35: return "Machine Heads";
		case 36: return "Engine Blade";
		case 37: return "Cypress Stick";
		case 38: return "Emil Heads";
		default: return "???";
	}
}