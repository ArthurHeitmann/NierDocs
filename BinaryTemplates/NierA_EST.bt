/*
BT for effect files. Mostly just copied from here https://github.com/Kerilk/bayonetta_tools
*/

LittleEndian();

struct {
	char id[4];
	uint32 recordCount;
	uint32 recordOffsetsOffset <format=hex>;
	uint32 typeOffset <format=hex>;
	uint32 typeEndOffset <format=hex>;
	uint32 typeSize;
	uint32 typeNumber;
} header;

FSeek(header.recordOffsetsOffset);
uint32 offsets[header.recordCount];

FSeek(header.typeOffset);
struct {
	struct {
		uint32 u_a;
		char id[4];
		uint32 size;
		uint32 offset;
	} types[header.typeNumber];
}typeGroups[header.recordCount] <optimize=true>;

typedef struct {
	int16   u_a;
	int16   effect_length;
	uint32  u_c <format=hex>;
	uint32  u_d <format=hex>;
	int16   anchor_bone;
	int16   u_e[7];
	float  uf_1[3];
	float  uf_2[3];
	float  uf_3[3];
} part_s <bgcolor = 0xFF00FF00>;

typedef struct {
	uint32 u_a;
	float offset_x;
	float offset_y;
	float offset_z;
	float unk_1;
	float top_pos_1;
	float right_pos_1;
	float move_speed_x;
	float move_speed_y;
	float move_speed_z;
	float move_small_speed_x;
	float move_small_speed_y;
	float move_small_speed_z;
	float u_b_1[6];
	float angle;
	float u_b_2[12];
	float scale1;
	float scale2;
	float scale3;
	float u_c[15];
	float red;
	float green;
	float blue;
	float alpha;
	float u_d_1[4];
	float fadeInSpeed;
	float effect_size_limit_1;
	float effect_size_limit_2;
	float effect_size_limit_3;
	float effect_size_limit_4;
	float fadeOutSpeed;
	float u_d_2[32];
} move_s <bgcolor = 0x00FF00FF>;

typedef struct {
	int16 count;
	int16 u_a;
	int16 u_b;
	int16 u_c;
	int16 playDelay;
	int16 showAtOnce;
	int16 size;
	int16 u_d;
	float u_e[8];
} emif_s <bgcolor = 0xFFFF0000>;

typedef struct {
	float u_a;
	int16 texture_file_id;
	int16 u_c;
	float u_d1;
	float u_d2;
	float u_d3;
	float u_d4;
	float u_d5;
	int16 video_fps_maybe;
	byte  texture_file_texture_index;
	byte  is_single_frame;
	float u_g;
	int16  frame_offset;
	int16  u_h;
	float distortion_effect_strength;
	uint32 mesh_id<format=hex>;
	float u_i2[8];
	uint32 u_i3<format=hex>;
	float u_i4[4];
	float u_j;
	float brightness;
	float u_n;
	float u_o;
	uint32 u_p<format=hex>;
	uint32 u_q<format=hex>;
	uint32 u_r<format=hex>;
	float u_s[12];
} tex_s <bgcolor = 0x0000FFFF>;

typedef struct {
	float u_a[24];
} pssa_s;

typedef struct {
	float u_a[20];
} fvwk_s <bgcolor = 0x00F0FF00>;

typedef struct {
	int16 u_a[6];
	int32 u_c[5];
} fwk_s <bgcolor = 0x00FFFF00>;

typedef struct {
	uint32 u_a;
	float u_b[107];   
} emmv_s <bgcolor = 0x00FF00AF>;

typedef struct {
	int32 u_a;
	int16 u_b[2];
	int32 u_c[6];
} emfw_s;

typedef struct {
	char u_a[4];
	float u_b[4];
	char u_c[4];
	int32 u_d[2];
} mjsg_s;

typedef struct {
	int16 u_a[40];
} mjcm_s;

local int i;
local int j;
for ( i=0; i<header.recordCount; i++ ) {
	FSeek(offsets[i]);
	struct {
		for ( j=0; j<23; j++ ) {
			if (typeGroups[i].types[j].size > 0) {
				FSeek(offsets[i] + typeGroups[i].types[j].offset);
				if ( Strncmp( typeGroups[i].types[j].id, "PART", 4 ) == 0 ) {
					part_s part;
					if (sizeof(part) != typeGroups[i].types[j].size) Warning("Warning incoherent size i: %d, j: %d", i, j);
				} else if ( Strncmp( typeGroups[i].types[j].id, "MOVE", 4 ) == 0 ) {
					move_s move;
					if (sizeof(move) != typeGroups[i].types[j].size) Warning("Warning incoherent size i: %d, j: %d", i, j);
				} else if ( Strncmp( typeGroups[i].types[j].id, "EMIF", 4 ) == 0 ) {
					emif_s emif;
					if (sizeof(emif) != typeGroups[i].types[j].size) Warning("Warning incoherent size i: %d, j: %d", i, j);
				} else if ( Strncmp( typeGroups[i].types[j].id, "TEX ", 4 ) == 0 ) {
					tex_s tex;
					if (sizeof(tex) != typeGroups[i].types[j].size) Warning("Warning incoherent size i: %d, j: %d", i, j);
				} else if ( Strncmp( typeGroups[i].types[j].id, "PSSA", 4 ) == 0 ) {
					pssa_s pssa;
					if (sizeof(pssa) != typeGroups[i].types[j].size) Warning("Warning incoherent size i: %d, j: %d", i, j);
				} else if ( Strncmp( typeGroups[i].types[j].id, "FVWK", 4 ) == 0 ) {
					fvwk_s fvwk;
					if (sizeof(fvwk) != typeGroups[i].types[j].size) Warning("Warning incoherent size i: %d, j: %d", i, j);
				} else if ( Strncmp( typeGroups[i].types[j].id, "FWK ", 4 ) == 0 ) {
					fwk_s fwk;
					if (sizeof(fwk) != typeGroups[i].types[j].size) Warning("Warning incoherent size i: %d, j: %d", i, j);
				} else if ( Strncmp( typeGroups[i].types[j].id, "EMMV", 4 ) == 0 ) {
					emmv_s emmv;
					if (sizeof(emmv) != typeGroups[i].types[j].size) Warning("Warning incoherent size i: %d, j: %d", i, j);
				} else if ( Strncmp( typeGroups[i].types[j].id, "EMFW", 4 ) == 0 ) {
					emfw_s emfw;
					if (sizeof(emfw) != typeGroups[i].types[j].size) Warning("Warning incoherent size i: %d, j: %d", i, j);
				} else if ( Strncmp( typeGroups[i].types[j].id, "MJSG", 4 ) == 0 ) {
					mjsg_s mjsg;
					if (sizeof(mjsg) != typeGroups[i].types[j].size) Warning("Warning incoherent size i: %d, j: %d", i, j);
				} else if ( Strncmp( typeGroups[i].types[j].id, "MJCM", 4 ) == 0 ) {
					mjcm_s mjcm;
					if (sizeof(mjcm) != typeGroups[i].types[j].size) Warning("Warning incoherent size i: %d, j: %d", i, j);
				} else {
					Warning("Unknown type %4s", typeGroups[i].types[j].id);
					struct {
						char u_a[typeGroups[i].types[j].size];
					} unknown <bgcolor = 0x000000FF>;
				}
			}
		}
	} record;
}